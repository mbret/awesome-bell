#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('ring:server');
var debugSocket = require('debug')('ring:socket');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(app.locals.config.port || process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
app.http = server;


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var socketEndPoint = app.locals.config.serverUrl + "/speaker";
debugSocket("connecting to " + socketEndPoint + "...");
var socket = require('socket.io-client')(socketEndPoint, {});
app.io = socket;

socket.on('connect', function(){
    debugSocket('connected');
    debugSocket("authenticate ...");
    socket
        .emit("authenticate", {token: app.locals.config.authToken})
        .on("authenticated", function() {
            debugSocket('authenticated');
            app.emit("io:connect", socket);
        })
        .on('unauthorized', function(msg) {
            debugSocket("unauthorized: " + JSON.stringify(msg.data));
        });
});

socket.on('reconnect', function(){
    debugSocket('reconnect');
});

socket.on('connect_timeout', function(){
    debugSocket('connect_timeout', app.locals.config.serverUrl);
});

socket.on("connect_error", function(err) {
    debugSocket("connect_error", err);
});

socket.on("reconnect_attempt", function(err) {
    debugSocket("reconnect_attempt", err);
});

socket.on("reconnect_failed", function(err) {
    debugSocket("reconnect_failed", err);
});

socket.on("reconnect_error", function(err) {
    debugSocket("reconnect_error", err);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
