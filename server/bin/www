#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server');
var debugSocket = require('debug')('socket');
var http = require('http');
var socketioJwt = require("socketio-jwt");
var IoServer = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || app.locals.config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = new IoServer(server, {});
app.locals.io = io;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Namespace /server
io.of("/server").on("connection", function (socket) {
    debugSocket("connection to /server");
});

// Namespace /client
// This namespace is secured by jwt
io.of("/client").use(socketioJwt.authorize({
    secret: app.locals.config.tokenSecret,
    handshake: true
}));
io.of("/client").on("connection", function (socket) {
    debugSocket("connection to /client");
    // we handle only one connection
    app.locals.socketRingClient = socket;

    // tell everyone that a ring is available
    io.of("/server").emit("client:connect");

    socket.on("disconnect", function() {
        debugSocket("disconnect from ring client");
        // we handle only one connection
        app.locals.socketRingClient = null;

        // tell everyone the ring is disconnected
        io.of("/server").emit("client:disconnect");
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
